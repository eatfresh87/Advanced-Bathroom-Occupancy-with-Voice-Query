blueprint:
  name: Advanced Bathroom Occupancy with Voice Query
  description: "Manages a bathroom light using motion and door sensors. When the room appears to be empty (door closes and motion stops), it asks a question on a media player to confirm occupancy before turning off the light. Requires a configured Voice Assistant and an input_boolean helper."
  domain: automation
  input:
    motion_sensor:
      name: Motion Sensor
      description: The sensor that detects motion in the bathroom.
      selector:
        entity:
          domain: binary_sensor
          device_class: motion
    door_sensor:
      name: Door Sensor
      description: The sensor on the bathroom door.
      selector:
        entity:
          domain: binary_sensor
          device_class: door
    light_target:
      name: Light
      description: The light switch or light group to control.
      selector:
        target:
          entity:
            - domain: light
            - domain: switch
    occupancy_helper:
      name: Occupancy Helper (Input Boolean)
      description: An input_boolean helper to track if the room is occupied. This blueprint will manage its state.
      selector:
        entity:
          domain: input_boolean
    media_player:
      name: Media Player
      description: The speaker for asking the confirmation question.
      selector:
        entity:
          domain: media_player
    first_question_timeout:
      name: First Question Timeout (Seconds)
      description: Time to wait for response to the first occupancy question.
      selector:
        number:
          min: 30
          max: 180
          unit_of_measurement: seconds
          mode: slider
          step: 15
      default: 60
    second_question_timeout:
      name: Second Question Timeout (Seconds)
      description: Time to wait for response to the second (final) occupancy question.
      selector:
        number:
          min: 30
          max: 180
          unit_of_measurement: seconds
          mode: slider
          step: 15
      default: 90
    motion_clear_delay:
      name: Motion Clear Delay (Seconds)
      description: How long to wait after motion stops before checking occupancy.
      selector:
        number:
          min: 5
          max: 300
          unit_of_measurement: seconds
          mode: slider
          step: 5
      default: 30
    manual_override_delay:
      name: Manual Override Delay (Seconds)
      description: How long to wait before checking sensors after manual light operation.
      selector:
        number:
          min: 5
          max: 60
          unit_of_measurement: seconds
          mode: slider
          step: 5
      default: 10
    enable_manual_safeguards:
      name: Enable Manual Operation Safeguards
      description: When enabled, the automation will handle manual light operations intelligently.
      selector:
        boolean:
      default: true

    voice_assistant:
      name: Voice Assistant
      description: The voice assistant to use for speech recognition.
      selector:
        entity:
          domain: conversation
      default: conversation.home_assistant
mode: single

max_exceeded: silent

variables:
  light_entity: !input light_target
  motion_delay: !input motion_clear_delay
  manual_delay: !input manual_override_delay
  safeguards_enabled: !input enable_manual_safeguards
  first_timeout: !input first_question_timeout
  second_timeout: !input second_question_timeout

trigger:
  - platform: state
    entity_id: !input motion_sensor
    to: 'on'
    id: motion_on
  - platform: state
    entity_id: !input door_sensor
    to: 'on'
    id: door_opened
  - platform: state
    entity_id: !input door_sensor
    from: 'on'
    to: 'off'
    id: door_closed
  - platform: state
    entity_id: !input motion_sensor
    to: 'off'
    for:
      seconds: "{{ motion_delay }}"
    id: motion_cleared
  - platform: state
    entity_id: !input light_target
    to: 'on'
    id: manual_light_on
  - platform: state
    entity_id: !input light_target
    to: 'off'
    id: manual_light_off

action:
  - choose:
      # === OCCUPANCY DETECTED ===
      - conditions:
          - condition: or
            conditions:
              - condition: trigger
                id: motion_on
              - condition: trigger
                id: door_opened
        sequence:
          - service: input_boolean.turn_on
            target:
              entity_id: !input occupancy_helper
          - service: homeassistant.turn_on
            target: !input light_target

      # === POTENTIAL EXIT DETECTED ===
      - conditions:
          - condition: trigger
            id: door_closed
          - condition: state
            entity_id: !input occupancy_helper
            state: 'on'
        sequence:
          # Wait a moment for any immediate motion
          - delay: '00:00:05'
          # Check if motion is still active
          - choose:
              - conditions:
                  - condition: state
                    entity_id: !input motion_sensor
                    state: 'on'
                sequence:
                  # Motion detected, wait for it to clear
                  - wait_for_trigger:
                      - platform: state
                        entity_id: !input motion_sensor
                        to: 'off'
                        for:
                          seconds: "{{ motion_delay }}"
                    timeout: '00:05:00'
                    continue_on_timeout: false
                  # Motion cleared, proceed with voice confirmation
                  - service: tts.speak
                    target:
                      entity_id: !input media_player
                    data:
                      message: "Is someone still in the bathroom? Please say yes or no. If you cannot answer right now, I will ask again in one minute before turning off the light."
                      cache: true
                  # Wait for voice response to first question
                  - wait_for_trigger:
                      - platform: conversation
                        command: 
                          - "yes"
                          - "yeah"
                          - "yep"
                          - "still here"
                          - "occupied"
                        id: "response_yes_1"
                      - platform: conversation
                        command:
                          - "no"
                          - "nope"
                          - "empty"
                          - "not occupied"
                          - "nobody here"
                        id: "response_no_1"
                    timeout:
                      seconds: "{{ first_timeout }}"
                    continue_on_timeout: true
                  # Process first response or ask second question
                  - choose:
                      # User said yes to first question - keep light on
                      - conditions:
                          - condition: trigger
                            id: "response_yes_1"
                        sequence:
                          - service: tts.speak
                            target:
                              entity_id: !input media_player
                            data:
                              message: "Okay, keeping the light on."
                              cache: true
                      # User said no to first question - turn off
                      - conditions:
                          - condition: trigger
                            id: "response_no_1"
                        sequence:
                          - service: input_boolean.turn_off
                            target:
                              entity_id: !input occupancy_helper
                          - service: homeassistant.turn_off
                            target: !input light_target
                          - service: tts.speak
                            target:
                              entity_id: !input media_player
                            data:
                              message: "Turning off the bathroom light."
                              cache: true
                    # No response to first question - ask second question
                    default:
                      - service: tts.speak
                        target:
                          entity_id: !input media_player
                        data:
                          message: "Last chance - is anyone still in the bathroom? Please say yes or no, or I will turn off the light."
                          cache: true
                      # Wait for voice response to second question
                      - wait_for_trigger:
                          - platform: conversation
                            command: 
                              - "yes"
                              - "yeah"
                              - "yep"
                              - "still here"
                              - "occupied"
                            id: "response_yes_2"
                          - platform: conversation
                            command:
                              - "no"
                              - "nope"
                              - "empty"
                              - "not occupied"
                              - "nobody here"
                            id: "response_no_2"
                        timeout:
                          seconds: "{{ second_timeout }}"
                        continue_on_timeout: true
                      # Process second response
                      - choose:
                          # User said yes to second question - keep light on
                          - conditions:
                              - condition: trigger
                                id: "response_yes_2"
                            sequence:
                              - service: tts.speak
                                target:
                                  entity_id: !input media_player
                                data:
                                  message: "Okay, keeping the light on."
                                  cache: true
                          # User said no to second question or no response - turn off
                          - conditions:
                              - condition: or
                                conditions:
                                  - condition: trigger
                                    id: "response_no_2"
                                  - condition: not
                                    conditions:
                                      - condition: trigger
                                        id: ["response_yes_2", "response_no_2"]
                            sequence:
                              - service: input_boolean.turn_off
                                target:
                                  entity_id: !input occupancy_helper
                              - service: homeassistant.turn_off
                                target: !input light_target
                              - choose:
                                  - conditions:
                                      - condition: trigger
                                        id: "response_no_2"
                                    sequence:
                                      - service: tts.speak
                                        target:
                                          entity_id: !input media_player
                                        data:
                                          message: "Turning off the bathroom light."
                                          cache: true
            default:
              # No motion detected after door closed
              - service: tts.speak
                target:
                  entity_id: !input media_player
                data:
                  message: "Is someone still in the bathroom? Please say yes or no. If you cannot answer right now, I will ask again in one minute before turning off the light."
                  cache: true
              # Wait for voice response to first question
              - wait_for_trigger:
                  - platform: conversation
                    command: 
                      - "yes"
                      - "yeah"
                      - "yep"
                      - "still here"
                      - "occupied"
                    id: "response_yes_1"
                  - platform: conversation
                    command:
                      - "no"
                      - "nope"
                      - "empty"
                      - "not occupied"
                      - "nobody here"
                    id: "response_no_1"
                timeout:
                  seconds: "{{ first_timeout }}"
                continue_on_timeout: true
              # Process first response or ask second question
              - choose:
                  # User said yes to first question - keep light on
                  - conditions:
                      - condition: trigger
                        id: "response_yes_1"
                    sequence:
                      - service: tts.speak
                        target:
                          entity_id: !input media_player
                        data:
                          message: "Okay, keeping the light on."
                          cache: true
                  # User said no to first question - turn off
                  - conditions:
                      - condition: trigger
                        id: "response_no_1"
                    sequence:
                      - service: input_boolean.turn_off
                        target:
                          entity_id: !input occupancy_helper
                      - service: homeassistant.turn_off
                        target: !input light_target
                      - service: tts.speak
                        target:
                          entity_id: !input media_player
                        data:
                          message: "Turning off the bathroom light."
                          cache: true
                # No response to first question - ask second question
                default:
                  - service: tts.speak
                    target:
                      entity_id: !input media_player
                    data:
                      message: "Last chance - is anyone still in the bathroom? Please say yes or no, or I will turn off the light."
                      cache: true
                  # Wait for voice response to second question
                  - wait_for_trigger:
                      - platform: conversation
                        command: 
                          - "yes"
                          - "yeah"
                          - "yep"
                          - "still here"
                          - "occupied"
                        id: "response_yes_2"
                      - platform: conversation
                        command:
                          - "no"
                          - "nope"
                          - "empty"
                          - "not occupied"
                          - "nobody here"
                        id: "response_no_2"
                    timeout:
                      seconds: "{{ second_timeout }}"
                    continue_on_timeout: true
                  # Process second response
                  - choose:
                      # User said yes to second question - keep light on
                      - conditions:
                          - condition: trigger
                            id: "response_yes_2"
                        sequence:
                          - service: tts.speak
                            target:
                              entity_id: !input media_player
                            data:
                              message: "Okay, keeping the light on."
                              cache: true
                      # User said no to second question or no response - turn off
                      - conditions:
                          - condition: or
                            conditions:
                              - condition: trigger
                                id: "response_no_2"
                              - condition: not
                                conditions:
                                  - condition: trigger
                                    id: ["response_yes_2", "response_no_2"]
                        sequence:
                          - service: input_boolean.turn_off
                            target:
                              entity_id: !input occupancy_helper
                          - service: homeassistant.turn_off
                            target: !input light_target
                          - choose:
                              - conditions:
                                  - condition: trigger
                                    id: "response_no_2"
                                sequence:
                                  - service: tts.speak
                                    target:
                                      entity_id: !input media_player
                                    data:
                                      message: "Turning off the bathroom light."
                                      cache: true

      # === MANUAL LIGHT TURNED ON ===
      - conditions:
          - condition: trigger
            id: manual_light_on
          - condition: template
            value_template: "{{ safeguards_enabled }}"
        sequence:
          - delay:
              seconds: "{{ manual_delay }}"
          - choose:
              # If occupancy helper is OFF but light was manually turned on
              - conditions:
                  - condition: state
                    entity_id: !input occupancy_helper
                    state: 'off'
                sequence:
                  # Check if there's actually motion or door is open
                  - choose:
                      - conditions:
                          - condition: or
                            conditions:
                              - condition: state
                                entity_id: !input motion_sensor
                                state: 'on'
                              - condition: state
                                entity_id: !input door_sensor
                                state: 'on'
                        sequence:
                          # Motion/door detected, update occupancy
                          - service: input_boolean.turn_on
                            target:
                              entity_id: !input occupancy_helper
                    default:
                      # No motion/door activity, assume someone is inside but not moving
                      - service: input_boolean.turn_on
                        target:
                          entity_id: !input occupancy_helper

      # === MANUAL LIGHT TURNED OFF ===
      - conditions:
          - condition: trigger
            id: manual_light_off
          - condition: template
            value_template: "{{ safeguards_enabled }}"
        sequence:
          - delay:
              seconds: "{{ manual_delay }}"
          - choose:
              # If occupancy helper is ON but light was manually turned off
              - conditions:
                  - condition: state
                    entity_id: !input occupancy_helper
                    state: 'on'
                sequence:
                  # Check current sensor states
                  - choose:
                      # If motion is active or door is open, someone is likely still there
                      - conditions:
                          - condition: or
                            conditions:
                              - condition: state
                                entity_id: !input motion_sensor
                                state: 'on'
                              - condition: state
                                entity_id: !input door_sensor
                                state: 'on'
                        sequence:
                          # Ask if they want the light back on
                          - service: tts.speak
                            target:
                              entity_id: !input media_player
                            data:
                              message: "Light was turned off manually. Should I turn it back on? Say yes or no."
                              cache: true
                          - wait_for_trigger:
                              - platform: conversation
                                command: 
                                  - "yes"
                                  - "yeah"
                                  - "yep"
                                  - "turn it on"
                                  - "turn on"
                                id: "restore_yes"
                              - platform: conversation
                                command:
                                  - "no"
                                  - "nope"
                                  - "keep it off"
                                  - "leave it off"
                                id: "restore_no"
                            timeout:
                              minutes: 1
                            continue_on_timeout: true
                          - choose:
                              # User wants light back on
                              - conditions:
                                  - condition: trigger
                                    id: "restore_yes"
                                sequence:
                                  - service: homeassistant.turn_on
                                    target:
                                      entity_id: !input light_target
                                  - service: tts.speak
                                    target:
                                      entity_id: !input media_player
                                    data:
                                      message: "Turning the light back on."
                                      cache: true
                              # User wants light off or no response
                              - conditions:
                                  - condition: or
                                    conditions:
                                      - condition: trigger
                                        id: "restore_no"
                                      - condition: not
                                        conditions:
                                          - condition: trigger
                                            id: ["restore_yes", "restore_no"]
                                sequence:
                                  # Update occupancy to match manual action
                                  - service: input_boolean.turn_off
                                    target:
                                      entity_id: !input occupancy_helper
                                  - service: homeassistant.turn_off
                                    target:
                                      entity_id: !input light_target
                                  - choose:
                                      - conditions:
                                          - condition: trigger
                                            id: "restore_no"
                                        sequence:
                                          - service: tts.speak
                                            target:
                                              entity_id: !input media_player
                                            data:
                                              message: "Okay, keeping the light off."
                                              cache: true
                    default:
                      # No motion/door activity, assume manual turn-off is intentional
                      - service: input_boolean.turn_off
                        target:
                          entity_id: !input occupancy_helper

      # === MOTION CLEARED (Alternative trigger) ===
      - conditions:
          - condition: trigger
            id: motion_cleared
          - condition: state
            entity_id: !input occupancy_helper
            state: 'on'
          - condition: state
            entity_id: !input door_sensor
            state: 'off'  # Door is closed
        sequence:
          - service: tts.speak
            target:
              entity_id: !input media_player
            data:
              message: "Is someone still in the bathroom? Please say yes or no. If you cannot answer right now, I will ask again in one minute before turning off the light."
              cache: true
          # Wait for voice response to first question
          - wait_for_trigger:
              - platform: conversation
                command: 
                  - "yes"
                  - "yeah"
                  - "yep"
                  - "still here"
                  - "occupied"
                id: "response_yes_1"
              - platform: conversation
                command:
                  - "no"
                  - "nope"
                  - "empty"
                  - "not occupied"
                  - "nobody here"
                id: "response_no_1"
            timeout:
              seconds: "{{ first_timeout }}"
            continue_on_timeout: true
          # Process first response or ask second question
          - choose:
              # User said yes to first question - keep light on
              - conditions:
                  - condition: trigger
                    id: "response_yes_1"
                sequence:
                  - service: tts.speak
                    target:
                      entity_id: !input media_player
                    data:
                      message: "Okay, keeping the light on."
                      cache: true
              # User said no to first question - turn off
              - conditions:
                  - condition: trigger
                    id: "response_no_1"
                sequence:
                  - service: input_boolean.turn_off
                    target:
                      entity_id: !input occupancy_helper
                  - service: homeassistant.turn_off
                    target: !input light_target
                  - service: tts.speak
                    target:
                      entity_id: !input media_player
                    data:
                      message: "Turning off the bathroom light."
                      cache: true
            # No response to first question - ask second question
            default:
              - service: tts.speak
                target:
                  entity_id: !input media_player
                data:
                  message: "Last chance - is anyone still in the bathroom? Please say yes or no, or I will turn off the light."
                  cache: true
              # Wait for voice response to second question
              - wait_for_trigger:
                  - platform: conversation
                    command: 
                      - "yes"
                      - "yeah"
                      - "yep"
                      - "still here"
                      - "occupied"
                    id: "response_yes_2"
                  - platform: conversation
                    command:
                      - "no"
                      - "nope"
                      - "empty"
                      - "not occupied"
                      - "nobody here"
                    id: "response_no_2"
                timeout:
                  seconds: "{{ second_timeout }}"
                continue_on_timeout: true
              # Process second response
              - choose:
                  # User said yes to second question - keep light on
                  - conditions:
                      - condition: trigger
                        id: "response_yes_2"
                    sequence:
                      - service: tts.speak
                        target:
                          entity_id: !input media_player
                        data:
                          message: "Okay, keeping the light on."
                          cache: true
                  # User said no to second question or no response - turn off
                  - conditions:
                      - condition: or
                        conditions:
                          - condition: trigger
                            id: "response_no_2"
                          - condition: not
                            conditions:
                              - condition: trigger
                                id: ["response_yes_2", "response_no_2"]
                        sequence:
                          - service: input_boolean.turn_off
                            target:
                              entity_id: !input occupancy_helper
                          - service: homeassistant.turn_off
                            target: !input light_target
                          - choose:
                              - conditions:
                                  - condition: trigger
                                    id: "response_no_2"
                                sequence:
                                  - service: tts.speak
                                    target:
                                      entity_id: !input media_player
                                    data:
                                      message: "Turning off the bathroom light."
                                      cache: true
